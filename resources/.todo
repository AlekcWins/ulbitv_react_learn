# Change links in diagram db
# make README DOCKER
# make README INSTALL
# make README Building for source
# replace styles to files

--FRONTEND --
# Rating
# Basket
? Container - ROW(NOT WORKING)
# split device store into device store type store and brand store
# normal handle errors for create TYPE BRAND Device
# add security for admin panel only ADMIN
#device add price validation
#device add img validation
#upgrade pagination - first last and ... for more pages
# if you want find all devices when you click on any type or brand

--BACKEND --
# Rating
# Basket
# normal handle errors for create TYPE BRAND Device




### Comment Dimas for future update my project
1. client

+ .env - в гитигнор, бэд практис держать в репозитории, понятно, что сейчас нет чувствительных данных - но когда они появятся - они попадут в репу (мы добавляем .env.example с затертыми данными + в доке описываем требуемое окружение)

mobx - мне ближе работа с деревом состояния (пробрасывается по принципу DI ссылка на родительский элемент ИЛИ просто на сам рут стор) - чтобы можно было иметь доступ к другим ветвям дерева изнутри одного из элементов (e.g. тащить айди юзера при оформлении заказа)

Чтобы не тащить везде контекст - инкапсулируй получение нужных стейтов в хук, e.g. useState()

Кусок на скрине - работа экшена мобикса по сути, зачем тащить http вызов в компоненты при наличии стейт-менеджера в проекте

2. backend

Зачем логику инициализации подключения к БД притащил в конфиг экспресса? Переноси в экспорт db.js
ImageController наверное тут напрашивается)))
Дефолтные значения можно устанавливать внутри деструктуризации
Хорошая практика - выносить тексты в отдельный JSON - легче позже прикрутить i18n
модели из models.js разноси в разные файлы - портянка
Ну и отступы у тебя везде прям джавашные, в ЖС не принято больше 1 пустой строки отбивать))
По кодстайлу прям сильно советую накатить ESLint c airbnb конфигом
